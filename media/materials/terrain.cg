struct TerrainVSOutput
{
    // transformed vertex coordinate
    float4    position                : POSITION;

    // lighting intensity color multiplier
    float4    color                    : COLOR0;
 
    // texture coordinate from vertex
    float2    texCoord                : TEXCOORD0;
 
    // texture coordinate from vertex that has been scaled
    float2    scaledTexCoord            : TEXCOORD1;
};

TerrainVSOutput TerrainVP
(
    float4                iPosition            : POSITION,
    float3                iNormal                : NORMAL,
    float2                iTexcoord            : TEXCOORD0,
 
    // the full World/View/Proj combined matrix
    uniform float4x4    worldViewProj,

    uniform float4x4    worldMat,

    uniform float4        fogParams,
    uniform float3        camPos,

    uniform float4        LightPosition,
    uniform float4        LightAttenuation,
    uniform float4        LightDiffuse,
    uniform float4        lightAmbient,
 
    // Ambient color of the terrain
    uniform float4        materialAmbient,
 
    // Size of a terrain page
    uniform float        pageSize,
 
    // How many meters is one tiling of the terrain textures
    uniform float        textureTileSize
)
{
    TerrainVSOutput output;
 
    // Calculate the output position and texture coordinates
    output.position  = mul(worldViewProj,iPosition);
    output.texCoord = float2(iPosition.x, iPosition.z)/pageSize;
    output.scaledTexCoord = output.texCoord * 256.0f / textureTileSize;

    // transform position to world space
    float4 position = mul(worldMat, iPosition);

    float4 lightPosition = mul(worldMat, LightPosition);
 
    // Account for whether the light is a point source.
    float3 lightDirection = lightPosition.xyz - (position * lightPosition.w).xyz;
    // set up attenuation params
    float lightDistance = length(lightDirection);
    float lightDistanceSquared = lightDistance * lightDistance;
 
    float lightAttenuation = (lightDistance > LightAttenuation.x) ? 0 : (1 / (LightAttenuation.y + LightAttenuation.z * lightDistance + LightAttenuation.w * lightDistanceSquared));
 
    // Do lighting calculations
    output.color = saturate(LightDiffuse * lightAttenuation + lightAmbient * materialAmbient);       
 
    // compute fog
    float dist = length(position - camPos);
    float fogAmount = max((dist - fogParams.y) * fogParams.w, 0);
    output.color = float4(output.color.rgb, fogAmount);
 
    return output;
}
 

float4 TerrainFP1(
    // output of vertex shader
    TerrainVSOutput In,

    float4      inPosition   : POSITION,
 
    uniform float4        alpha0Mask,
    uniform float4        fogColour,
 
    // alpha map 0
    uniform sampler2D   alphaMap0Sampler : register(s0),
 
    // layer 0 texture
    uniform sampler2D   layer0Sampler : register(s1),
 
    // layer 1 texture
    uniform sampler2D   layer1Sampler : register(s2),
 
    // layer 2 texture
    uniform sampler2D    layer2Sampler : register(s3)
) : COLOR
{
    float4 outputColor;

    float4 alpha0 = tex2D(alphaMap0Sampler, In.texCoord);
 
    alpha0 = alpha0 * alpha0Mask;

    float4 l0 = tex2D(layer0Sampler, In.scaledTexCoord.xy);
    float4 l1 = tex2D(layer1Sampler, In.scaledTexCoord.xy);
    float4 l2 = tex2D(layer2Sampler, In.scaledTexCoord.xy);
 
    outputColor = alpha0.r * l0 + alpha0.g * l1 + alpha0.b * l2;
 
    // scale output color by the color from the vertex shader, which is the
    // output of the lighting calculations
    float origAlpha = outputColor.a;
    outputColor *= In.color;

    float3 blendValue = lerp(outputColor.rgb, fogColour.rgb, In.color.a);
    outputColor = float4(blendValue, origAlpha);
 
    return outputColor;
}

float4 TerrainFP2(
    // output of vertex shader
    TerrainVSOutput In,

    float4      inPosition   : POSITION,
 
    uniform float4        alpha0Mask,
    uniform float4        alpha1Mask,
    uniform float4        fogColour,
 
    // alpha map 0
    uniform sampler2D   alphaMap0Sampler : register(s0),
 
    // alpha map 1
    uniform sampler2D   alphaMap1Sampler : register(s1),
 
    // layer 0 texture
    uniform sampler2D   layer0Sampler : register(s2),
 
    // layer 1 texture
    uniform sampler2D   layer1Sampler : register(s3),
 
    // layer 2 texture
    uniform sampler2D    layer2Sampler : register(s4),
 
    // layer 3 texture
    uniform sampler2D   layer3Sampler : register(s5),
 
    // layer 4 texture
    uniform sampler2D   layer4Sampler : register(s6),
 
    // layer 5 texture
    uniform sampler2D    layer5Sampler : register(s7)
) : COLOR
{
    float4 outputColor;
 
    // XXX - use worldPageTexCoord for now
    float4 alpha0 = tex2D(alphaMap0Sampler, In.texCoord);
    float4 alpha1 = tex2D(alphaMap1Sampler, In.texCoord);
 
    alpha0 = alpha0 * alpha0Mask;
    alpha1 = alpha1 * alpha1Mask;
 
 float4 l0 = tex2D(layer0Sampler, In.scaledTexCoord.xy);
    float4 l1 = tex2D(layer1Sampler, In.scaledTexCoord.xy);
    float4 l2 = tex2D(layer2Sampler, In.scaledTexCoord.xy);
    float4 l3 = tex2D(layer3Sampler, In.scaledTexCoord.xy);
    float4 l4 = tex2D(layer4Sampler, In.scaledTexCoord.xy);
    float4 l5 = tex2D(layer5Sampler, In.scaledTexCoord.xy);
 
    outputColor = alpha0.r * l0 + alpha0.g * l1 + alpha0.b * l2 + alpha1.r * l3 + alpha1.g * l4 + alpha1.b * l5;
 
    // scale output color by the color from the vertex shader, which is the
    // output of the lighting calculations
    float origAlpha = outputColor.a;
    outputColor *= In.color;

    float3 blendValue = lerp(outputColor.rgb, fogColour.rgb, In.color.a);
    outputColor = float4(blendValue, origAlpha);
 
    return outputColor;
}